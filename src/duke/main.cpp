#include "duke/cmdline/CmdLineParameters.hpp"
#include "duke/engine/DukeApplication.hpp"
#include "duke/io/IO.hpp"
#include "duke/benchmark/Benchmark.hpp"
#include "duke/config.h"  // autogenerated from config.h.in

int main(int argc, char **argv) {
  using namespace duke;
  try {
    const CmdLineParameters parameters(argc, argv);
    switch (parameters.mode) {
      case ApplicationMode::VERSION: {
        const char *pCompilationMode = DUKE_RELEASE ? "" : "_debug";
        printf("duke %s #%s%s\n",  //
               DUKE_VERSION,       //
               DUKE_GIT_SHA1,      //
               pCompilationMode);  // autogenerated from config.h.in
        break;
      }
      case ApplicationMode::LIST_SUPPORTED_FORMAT: {
        printf("Supported plugins :\n");
        for (const auto &pDescriptor : IODescriptors::instance().getDescriptors()) {
          printf(" * %s : ", pDescriptor->getName());
          for (const auto &extension : pDescriptor->getSupportedExtensions()) printf("%s ", extension.c_str());
          printf("\n");
        }
        break;
      }
      case ApplicationMode::HELP:
        parameters.printHelpMessage();
        break;
      case ApplicationMode::BENCHMARK:
        benchmark();
        break;
      case ApplicationMode::DUKE:
        DukeApplication duke(parameters);
        duke.run();
        break;
    }
  }
  catch (duke::commandline_error &e) {
    fprintf(stderr, "Command line says : %s\n", e.what());
    return EXIT_FAILURE;
  }
  catch (std::exception &e) {
    fprintf(stderr, "Unexpected error\n%s\n", e.what());
    return EXIT_FAILURE;
  }
  return EXIT_SUCCESS;
}
